const path = require('path')
const HtmlWebpackPlugin = require('html-webpack-plugin')
const { CleanWebpackPlugin } = require('clean-webpack-plugin')
const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const CopyPlugin = require('copy-webpack-plugin')
const FaviconsWebpackPlugin = require('favicons-webpack-plugin')

module.exports = {
  entry: './src/index.tsx',
  optimization: {
    usedExports: true,
  },
  output: {
    filename: '[name].[contenthash].js',
    path: path.resolve(__dirname, 'dist'),
    publicPath: '/',
  },
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        exclude: /node_modules/,
        use: {
          loader: 'ts-loader',
          options: {
            // disable type checker - we will use it in fork plugin
            transpileOnly: true,
          },
        },
      },
      {
        test: /\.(scss|css)$/,
        use: [
          process.env.NODE_ENV !== 'production'
            ? 'style-loader'
            : MiniCssExtractPlugin.loader,
          'css-loader',
          {
            loader: 'sass-loader',
            options: {
              sourceMap: true,
            },
          },
        ],
      },
      {
        test: /\.html$/i,
        loader: 'html-loader',
      },
      {
        test: /\.png|svg|jpg|gif$/,
        use: ['file-loader'],
      },
    ],
  },
  resolve: {
    extensions: ['.tsx', '.ts', '.js'],
  },
  plugins: [
    new MiniCssExtractPlugin({
      // Options similar to the same options in webpackOptions.output
      // both options are optional
      filename: '[name].[contenthash].css',
      chunkFilename: '[id].css',
    }),
    new CleanWebpackPlugin(),
    new HtmlWebpackPlugin({
      template: './src/index.html',
    }),
    // new FaviconsWebpackPlugin({
    //   // Your source logo (required)
    //   logo: './src/assets/favicon_apple.png',
    //   // Enable caching and optionally specify the path to store cached data
    //   // Note: disabling caching may increase build times considerably
    //   cache: true,
    //   // Override the publicPath option usually read from webpack configuration
    //   publicPath: '/',
    //   // The directory to output the assets relative to the webpack output dir.
    //   // Relative string paths are allowed here ie '../public/static'. If this
    //   // option is not set, `prefix` is used.
    //   outputPath: 'images/favicons',
    //   // Prefix path for generated assets
    //   prefix: 'images/favicons/',
    //   // Inject html links/metadata (requires html-webpack-plugin).
    //   // This option accepts arguments of different types:
    //   //  * boolean
    //   //    `false`: disables injection
    //   //    `true`: enables injection if that is not disabled in html-webpack-plugin
    //   //  * function
    //   //    any predicate that takes an instance of html-webpack-plugin and returns either
    //   //    `true` or `false` to control the injection of html metadata for the html files
    //   //    generated by this instance.
    //   inject: true
    // }),
    new ForkTsCheckerWebpackPlugin(),
    // new CopyPlugin({
      // patterns: [{ from: 'node_modules/@cms/mw_ui_kit/dist/images', to: 'images' }]
    // }),
  ],
}
